

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Sep 30 17:23:18 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    20  0000                     
    21                           ; Version 2.20
    22                           ; Generated 12/02/2020 GMT
    23                           ; 
    24                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F4550 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     _RCREG	set	4014
    56  0000                     _RCSTAbits	set	4011
    57  0000                     _TXREG	set	4013
    58  0000                     _TXSTAbits	set	4012
    59  0000                     _PIR1bits	set	3998
    60  0000                     _SPBRGH	set	4016
    61  0000                     _SPBRG	set	4015
    62  0000                     _BAUDCONbits	set	4024
    63  0000                     _BAUDCON	set	4024
    64  0000                     _RCSTA	set	4011
    65  0000                     _TXSTA	set	4012
    66  0000                     _TRISCbits	set	3988
    67  0000                     _ADCON1bits	set	4033
    68                           
    69                           	psect	smallconst
    70  000800                     __psmallconst:
    71                           	callstack 0
    72  000800  00                 	db	0
    73  000801                     STR_1:
    74  000801  44                 	db	68	;'D'
    75  000802  61                 	db	97	;'a'
    76  000803  74                 	db	116	;'t'
    77  000804  6F                 	db	111	;'o'
    78  000805  20                 	db	32
    79  000806  72                 	db	114	;'r'
    80  000807  65                 	db	101	;'e'
    81  000808  63                 	db	99	;'c'
    82  000809  69                 	db	105	;'i'
    83  00080A  62                 	db	98	;'b'
    84  00080B  69                 	db	105	;'i'
    85  00080C  64                 	db	100	;'d'
    86  00080D  6F                 	db	111	;'o'
    87  00080E  3A                 	db	58	;':'
    88  00080F  20                 	db	32
    89  000810  00                 	db	0
    90  000811                     STR_2:
    91  000811  0D                 	db	13
    92  000812  0A                 	db	10
    93  000813  00                 	db	0
    94  000814  00                 	db	0	; dummy byte at the end
    95  0000                     
    96                           ; #config settings
    97                           
    98                           	psect	cinit
    99  000A18                     __pcinit:
   100                           	callstack 0
   101  000A18                     start_initialization:
   102                           	callstack 0
   103  000A18                     __initialization:
   104                           	callstack 0
   105                           
   106                           ; Clear objects allocated to COMRAM (1 bytes)
   107  000A18  6A18               	clrf	__pbssCOMRAM& (0+255),c
   108  000A1A                     end_of_initialization:
   109                           	callstack 0
   110  000A1A                     __end_of__initialization:
   111                           	callstack 0
   112  000A1A  0E00               	movlw	low (__Lsmallconst shr (0+16))
   113  000A1C  6EF8               	movwf	tblptru,c
   114  000A1E  0E08               	movlw	high __Lsmallconst
   115  000A20  6EF7               	movwf	tblptrh,c
   116  000A22  0100               	movlb	0
   117  000A24  EF94  F004         	goto	_main	;jump to C main() function
   118                           
   119                           	psect	bssCOMRAM
   120  000018                     __pbssCOMRAM:
   121                           	callstack 0
   122  000018                     _dato_rx:
   123                           	callstack 0
   124  000018                     	ds	1
   125                           
   126                           	psect	cstackCOMRAM
   127  000001                     __pcstackCOMRAM:
   128                           	callstack 0
   129  000001                     ?_Uart_Available:
   130                           	callstack 0
   131  000001                     ?___lldiv:
   132                           	callstack 0
   133  000001                     Uart_Send_Char@txData:
   134                           	callstack 0
   135  000001                     ___lldiv@dividend:
   136                           	callstack 0
   137                           
   138                           ; 4 bytes @ 0x0
   139  000001                     	ds	1
   140  000002                     Uart_Send_String@info:
   141                           	callstack 0
   142                           
   143                           ; 2 bytes @ 0x1
   144  000002                     	ds	1
   145  000003                     ??_Uart_Available:
   146                           
   147                           ; 1 bytes @ 0x2
   148  000003                     	ds	1
   149  000004                     
   150                           ; 1 bytes @ 0x3
   151  000004                     	ds	1
   152  000005                     ___lldiv@divisor:
   153                           	callstack 0
   154                           
   155                           ; 4 bytes @ 0x4
   156  000005                     	ds	4
   157  000009                     ___lldiv@quotient:
   158                           	callstack 0
   159                           
   160                           ; 4 bytes @ 0x8
   161  000009                     	ds	4
   162  00000D                     ___lldiv@counter:
   163                           	callstack 0
   164                           
   165                           ; 1 bytes @ 0xC
   166  00000D                     	ds	1
   167  00000E                     Uart_Init@baud:
   168                           	callstack 0
   169                           
   170                           ; 4 bytes @ 0xD
   171  00000E                     	ds	4
   172  000012                     ??_Uart_Init:
   173                           
   174                           ; 1 bytes @ 0x11
   175  000012                     	ds	4
   176  000016                     Uart_Init@vx:
   177                           	callstack 0
   178                           
   179                           ; 2 bytes @ 0x15
   180  000016                     	ds	2
   181  000018                     
   182                           ; 1 bytes @ 0x17
   183 ;;
   184 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   185 ;;
   186 ;; *************** function _main *****************
   187 ;; Defined at:
   188 ;;		line 23 in file "UART_RX_Datos.c"
   189 ;; Parameters:    Size  Location     Type
   190 ;;		None
   191 ;; Auto vars:     Size  Location     Type
   192 ;;		None
   193 ;; Return value:  Size  Location     Type
   194 ;;                  1    wreg      void 
   195 ;; Registers used:
   196 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   197 ;; Tracked objects:
   198 ;;		On entry : 0/0
   199 ;;		On exit  : 0/0
   200 ;;		Unchanged: 0/0
   201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   202 ;;      Params:         0       0       0       0       0       0       0       0       0
   203 ;;      Locals:         0       0       0       0       0       0       0       0       0
   204 ;;      Temps:          0       0       0       0       0       0       0       0       0
   205 ;;      Totals:         0       0       0       0       0       0       0       0       0
   206 ;;Total ram usage:        0 bytes
   207 ;; Hardware stack levels required when called: 2
   208 ;; This function calls:
   209 ;;		_Uart_Available
   210 ;;		_Uart_Init
   211 ;;		_Uart_Read
   212 ;;		_Uart_Send_Char
   213 ;;		_Uart_Send_String
   214 ;; This function is called by:
   215 ;;		Startup code after reset
   216 ;; This function uses a non-reentrant model
   217 ;;
   218                           
   219                           	psect	text0
   220  000928                     __ptext0:
   221                           	callstack 0
   222  000928                     _main:
   223                           	callstack 29
   224  000928                     
   225                           ;UART_RX_Datos.c: 25:     ADCON1bits.PCFG = 0x0F;
   226  000928  0E0F               	movlw	15
   227  00092A  12C1               	iorwf	193,f,c	;volatile
   228  00092C                     
   229                           ;UART_RX_Datos.c: 26:     Uart_Init(9600);
   230  00092C  0E80               	movlw	128
   231  00092E  6E0E               	movwf	Uart_Init@baud^0,c
   232  000930  0E25               	movlw	37
   233  000932  6E0F               	movwf	(Uart_Init@baud+1)^0,c
   234  000934  0E00               	movlw	0
   235  000936  6E10               	movwf	(Uart_Init@baud+2)^0,c
   236  000938  0E00               	movlw	0
   237  00093A  6E11               	movwf	(Uart_Init@baud+3)^0,c
   238  00093C  EC5D  F004         	call	_Uart_Init	;wreg free
   239  000940                     l927:
   240                           
   241                           ;UART_RX_Datos.c: 29:     {;UART_RX_Datos.c: 30:         if(Uart_Available() > 0)
   242  000940  ECF3  F004         	call	_Uart_Available	;wreg free
   243  000944  BE02               	btfsc	(?_Uart_Available+1)^0,7,c
   244  000946  EFAD  F004         	goto	u221
   245  00094A  5002               	movf	(?_Uart_Available+1)^0,w,c
   246  00094C  E108               	bnz	u220
   247  00094E  0401               	decf	?_Uart_Available^0,w,c
   248  000950  A0D8               	btfss	status,0,c
   249  000952  EFAD  F004         	goto	u221
   250  000956  EFAF  F004         	goto	u220
   251  00095A                     u221:
   252  00095A  EFA0  F004         	goto	l927
   253  00095E                     u220:
   254  00095E                     
   255                           ;UART_RX_Datos.c: 31:         {;UART_RX_Datos.c: 32:             dato_rx = Uart_Read();
   256  00095E  ECE0  F004         	call	_Uart_Read	;wreg free
   257  000962  6E18               	movwf	_dato_rx^0,c
   258  000964                     
   259                           ;UART_RX_Datos.c: 34:             Uart_Send_String("Dato recibido: ");
   260  000964  0E01               	movlw	low STR_1
   261  000966  6E02               	movwf	Uart_Send_String@info^0,c
   262  000968  0E08               	movlw	high STR_1
   263  00096A  6E03               	movwf	(Uart_Send_String@info+1)^0,c
   264  00096C  ECC5  F004         	call	_Uart_Send_String	;wreg free
   265  000970                     
   266                           ;UART_RX_Datos.c: 35:             Uart_Send_Char(dato_rx);
   267  000970  5018               	movf	_dato_rx^0,w,c
   268  000972  EC01  F005         	call	_Uart_Send_Char
   269                           
   270                           ;UART_RX_Datos.c: 36:             Uart_Send_String("\r\n");
   271  000976  0E11               	movlw	low STR_2
   272  000978  6E02               	movwf	Uart_Send_String@info^0,c
   273  00097A  0E08               	movlw	high STR_2
   274  00097C  6E03               	movwf	(Uart_Send_String@info+1)^0,c
   275  00097E  ECC5  F004         	call	_Uart_Send_String	;wreg free
   276  000982  EFA0  F004         	goto	l927
   277  000986  EF00  F000         	goto	start
   278  00098A                     __end_of_main:
   279                           	callstack 0
   280                           
   281 ;; *************** function _Uart_Send_String *****************
   282 ;; Defined at:
   283 ;;		line 35 in file "uart.c"
   284 ;; Parameters:    Size  Location     Type
   285 ;;  info            2    1[COMRAM] PTR unsigned char 
   286 ;;		 -> STR_2(3), STR_1(16), 
   287 ;; Auto vars:     Size  Location     Type
   288 ;;		None
   289 ;; Return value:  Size  Location     Type
   290 ;;                  1    wreg      void 
   291 ;; Registers used:
   292 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   293 ;; Tracked objects:
   294 ;;		On entry : 0/0
   295 ;;		On exit  : 0/0
   296 ;;		Unchanged: 0/0
   297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   298 ;;      Params:         2       0       0       0       0       0       0       0       0
   299 ;;      Locals:         0       0       0       0       0       0       0       0       0
   300 ;;      Temps:          0       0       0       0       0       0       0       0       0
   301 ;;      Totals:         2       0       0       0       0       0       0       0       0
   302 ;;Total ram usage:        2 bytes
   303 ;; Hardware stack levels used: 1
   304 ;; Hardware stack levels required when called: 1
   305 ;; This function calls:
   306 ;;		_Uart_Send_Char
   307 ;; This function is called by:
   308 ;;		_main
   309 ;; This function uses a non-reentrant model
   310 ;;
   311                           
   312                           	psect	text1
   313  00098A                     __ptext1:
   314                           	callstack 0
   315  00098A                     _Uart_Send_String:
   316                           	callstack 29
   317  00098A                     
   318                           ;uart.c: 35: void Uart_Send_String(char *info);uart.c: 36: {;uart.c: 37:     while(*info
      +                          )
   319  00098A  EFD1  F004         	goto	l921
   320  00098E                     l917:
   321                           
   322                           ;uart.c: 38:     {;uart.c: 39:         Uart_Send_Char(*info++);
   323  00098E  C002  FFF6         	movff	Uart_Send_String@info,tblptrl
   324  000992  C003  FFF7         	movff	Uart_Send_String@info+1,tblptrh
   325  000996                     	if	0	;tblptru may be non-zero
   326  000996                     	endif
   327  000996                     	if	0	;tblptru may be non-zero
   328  000996                     	endif
   329  000996  0008               	tblrd		*
   330  000998  50F5               	movf	tablat,w,c
   331  00099A  EC01  F005         	call	_Uart_Send_Char
   332  00099E  4A02               	infsnz	Uart_Send_String@info^0,f,c
   333  0009A0  2A03               	incf	(Uart_Send_String@info+1)^0,f,c
   334  0009A2                     l921:
   335                           
   336                           ;uart.c: 37:     while(*info)
   337  0009A2  C002  FFF6         	movff	Uart_Send_String@info,tblptrl
   338  0009A6  C003  FFF7         	movff	Uart_Send_String@info+1,tblptrh
   339  0009AA                     	if	0	;tblptru may be non-zero
   340  0009AA                     	endif
   341  0009AA                     	if	0	;tblptru may be non-zero
   342  0009AA                     	endif
   343  0009AA  0008               	tblrd		*
   344  0009AC  50F5               	movf	tablat,w,c
   345  0009AE  0900               	iorlw	0
   346  0009B0  A4D8               	btfss	status,2,c
   347  0009B2  EFDD  F004         	goto	u211
   348  0009B6  EFDF  F004         	goto	u210
   349  0009BA                     u211:
   350  0009BA  EFC7  F004         	goto	l917
   351  0009BE                     u210:
   352  0009BE  0012               	return		;funcret
   353  0009C0                     __end_of_Uart_Send_String:
   354                           	callstack 0
   355                           
   356 ;; *************** function _Uart_Send_Char *****************
   357 ;; Defined at:
   358 ;;		line 29 in file "uart.c"
   359 ;; Parameters:    Size  Location     Type
   360 ;;  txData          1    wreg     unsigned char 
   361 ;; Auto vars:     Size  Location     Type
   362 ;;  txData          1    0[COMRAM] unsigned char 
   363 ;; Return value:  Size  Location     Type
   364 ;;                  1    wreg      void 
   365 ;; Registers used:
   366 ;;		wreg
   367 ;; Tracked objects:
   368 ;;		On entry : 0/0
   369 ;;		On exit  : 0/0
   370 ;;		Unchanged: 0/0
   371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   372 ;;      Params:         0       0       0       0       0       0       0       0       0
   373 ;;      Locals:         1       0       0       0       0       0       0       0       0
   374 ;;      Temps:          0       0       0       0       0       0       0       0       0
   375 ;;      Totals:         1       0       0       0       0       0       0       0       0
   376 ;;Total ram usage:        1 bytes
   377 ;; Hardware stack levels used: 1
   378 ;; This function calls:
   379 ;;		Nothing
   380 ;; This function is called by:
   381 ;;		_main
   382 ;;		_Uart_Send_String
   383 ;; This function uses a non-reentrant model
   384 ;;
   385                           
   386                           	psect	text2
   387  000A02                     __ptext2:
   388                           	callstack 0
   389  000A02                     _Uart_Send_Char:
   390                           	callstack 29
   391                           
   392                           ;incstack = 0
   393                           ;Uart_Send_Char@txData stored from wreg
   394  000A02  6E01               	movwf	Uart_Send_Char@txData^0,c
   395  000A04                     l56:
   396  000A04  A2AC               	btfss	172,1,c	;volatile
   397  000A06  EF07  F005         	goto	u11
   398  000A0A  EF09  F005         	goto	u10
   399  000A0E                     u11:
   400  000A0E  EF02  F005         	goto	l56
   401  000A12                     u10:
   402  000A12                     
   403                           ;uart.c: 32:     TXREG = txData;
   404  000A12  C001  FFAD         	movff	Uart_Send_Char@txData,4013	;volatile
   405  000A16  0012               	return		;funcret
   406  000A18                     __end_of_Uart_Send_Char:
   407                           	callstack 0
   408                           
   409 ;; *************** function _Uart_Read *****************
   410 ;; Defined at:
   411 ;;		line 43 in file "uart.c"
   412 ;; Parameters:    Size  Location     Type
   413 ;;		None
   414 ;; Auto vars:     Size  Location     Type
   415 ;;		None
   416 ;; Return value:  Size  Location     Type
   417 ;;                  1    wreg      unsigned char 
   418 ;; Registers used:
   419 ;;		wreg, status,2
   420 ;; Tracked objects:
   421 ;;		On entry : 0/0
   422 ;;		On exit  : 0/0
   423 ;;		Unchanged: 0/0
   424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   425 ;;      Params:         0       0       0       0       0       0       0       0       0
   426 ;;      Locals:         0       0       0       0       0       0       0       0       0
   427 ;;      Temps:          0       0       0       0       0       0       0       0       0
   428 ;;      Totals:         0       0       0       0       0       0       0       0       0
   429 ;;Total ram usage:        0 bytes
   430 ;; Hardware stack levels used: 1
   431 ;; This function calls:
   432 ;;		Nothing
   433 ;; This function is called by:
   434 ;;		_main
   435 ;;		_Uart_Read_String
   436 ;;		_Uart_Read_StringUntil
   437 ;; This function uses a non-reentrant model
   438 ;;
   439                           
   440                           	psect	text3
   441  0009C0                     __ptext3:
   442                           	callstack 0
   443  0009C0                     _Uart_Read:
   444                           	callstack 30
   445  0009C0                     l68:
   446  0009C0  AA9E               	btfss	158,5,c	;volatile
   447  0009C2  EFE5  F004         	goto	u71
   448  0009C6  EFE7  F004         	goto	u70
   449  0009CA                     u71:
   450  0009CA  EFE0  F004         	goto	l68
   451  0009CE                     u70:
   452  0009CE                     
   453                           ;uart.c: 46:     if(RCSTAbits.OERR == 1)
   454  0009CE  A2AB               	btfss	171,1,c	;volatile
   455  0009D0  EFEC  F004         	goto	u81
   456  0009D4  EFEE  F004         	goto	u80
   457  0009D8                     u81:
   458  0009D8  EFF0  F004         	goto	l71
   459  0009DC                     u80:
   460  0009DC                     
   461                           ;uart.c: 47:     {;uart.c: 48:         RCSTAbits.CREN = 0;
   462  0009DC  98AB               	bcf	171,4,c	;volatile
   463                           
   464                           ;uart.c: 49:         RCSTAbits.CREN = 1;
   465  0009DE  88AB               	bsf	171,4,c	;volatile
   466  0009E0                     l71:
   467                           
   468                           ;uart.c: 51:     PIR1bits.RCIF = 0;
   469  0009E0  9A9E               	bcf	158,5,c	;volatile
   470  0009E2                     
   471                           ;uart.c: 52:     return RCREG;
   472  0009E2  50AE               	movf	174,w,c	;volatile
   473  0009E4  0012               	return		;funcret
   474  0009E6                     __end_of_Uart_Read:
   475                           	callstack 0
   476                           
   477 ;; *************** function _Uart_Init *****************
   478 ;; Defined at:
   479 ;;		line 11 in file "uart.c"
   480 ;; Parameters:    Size  Location     Type
   481 ;;  baud            4   13[COMRAM] unsigned long 
   482 ;; Auto vars:     Size  Location     Type
   483 ;;  vx              2   21[COMRAM] unsigned int 
   484 ;; Return value:  Size  Location     Type
   485 ;;                  1    wreg      void 
   486 ;; Registers used:
   487 ;;		wreg, status,2, status,0, cstack
   488 ;; Tracked objects:
   489 ;;		On entry : 0/0
   490 ;;		On exit  : 0/0
   491 ;;		Unchanged: 0/0
   492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   493 ;;      Params:         4       0       0       0       0       0       0       0       0
   494 ;;      Locals:         2       0       0       0       0       0       0       0       0
   495 ;;      Temps:          4       0       0       0       0       0       0       0       0
   496 ;;      Totals:        10       0       0       0       0       0       0       0       0
   497 ;;Total ram usage:       10 bytes
   498 ;; Hardware stack levels used: 1
   499 ;; Hardware stack levels required when called: 1
   500 ;; This function calls:
   501 ;;		___lldiv
   502 ;; This function is called by:
   503 ;;		_main
   504 ;; This function uses a non-reentrant model
   505 ;;
   506                           
   507                           	psect	text4
   508  0008BA                     __ptext4:
   509                           	callstack 0
   510  0008BA                     _Uart_Init:
   511                           	callstack 29
   512  0008BA                     
   513                           ;uart.c: 11: void Uart_Init(unsigned long baud);uart.c: 12: {;uart.c: 13:     TRISCbits.
      +                          RC6 = 0;
   514  0008BA  9C94               	bcf	148,6,c	;volatile
   515                           
   516                           ;uart.c: 14:     TRISCbits.RC7 = 1;
   517  0008BC  8E94               	bsf	148,7,c	;volatile
   518  0008BE                     
   519                           ;uart.c: 15:     TXSTA = 0x24;
   520  0008BE  0E24               	movlw	36
   521  0008C0  6EAC               	movwf	172,c	;volatile
   522                           
   523                           ;uart.c: 16:     RCSTA = 0x90;
   524  0008C2  0E90               	movlw	144
   525  0008C4  6EAB               	movwf	171,c	;volatile
   526                           
   527                           ;uart.c: 17:     BAUDCON = 0x00;
   528  0008C6  0E00               	movlw	0
   529  0008C8  6EB8               	movwf	184,c	;volatile
   530  0008CA                     
   531                           ;uart.c: 18:     BAUDCONbits.BRG16 = 1;
   532  0008CA  86B8               	bsf	184,3,c	;volatile
   533  0008CC                     
   534                           ;uart.c: 19:     unsigned int vx = (48000000/(baud*4))-1;
   535  0008CC  0E00               	movlw	0
   536  0008CE  6E01               	movwf	___lldiv@dividend^0,c
   537  0008D0  0E6C               	movlw	108
   538  0008D2  6E02               	movwf	(___lldiv@dividend+1)^0,c
   539  0008D4  0EDC               	movlw	220
   540  0008D6  6E03               	movwf	(___lldiv@dividend+2)^0,c
   541  0008D8  0E02               	movlw	2
   542  0008DA  6E04               	movwf	(___lldiv@dividend+3)^0,c
   543  0008DC  C00E  F012         	movff	Uart_Init@baud,??_Uart_Init
   544  0008E0  C00F  F013         	movff	Uart_Init@baud+1,??_Uart_Init+1
   545  0008E4  C010  F014         	movff	Uart_Init@baud+2,??_Uart_Init+2
   546  0008E8  C011  F015         	movff	Uart_Init@baud+3,??_Uart_Init+3
   547  0008EC  0E02               	movlw	2
   548  0008EE                     u195:
   549  0008EE  90D8               	bcf	status,0,c
   550  0008F0  3612               	rlcf	??_Uart_Init^0,f,c
   551  0008F2  3613               	rlcf	(??_Uart_Init+1)^0,f,c
   552  0008F4  3614               	rlcf	(??_Uart_Init+2)^0,f,c
   553  0008F6  3615               	rlcf	(??_Uart_Init+3)^0,f,c
   554  0008F8  2EE8               	decfsz	wreg,f,c
   555  0008FA  EF77  F004         	goto	u195
   556  0008FE  C012  F005         	movff	??_Uart_Init,___lldiv@divisor
   557  000902  C013  F006         	movff	??_Uart_Init+1,___lldiv@divisor+1
   558  000906  C014  F007         	movff	??_Uart_Init+2,___lldiv@divisor+2
   559  00090A  C015  F008         	movff	??_Uart_Init+3,___lldiv@divisor+3
   560  00090E  EC0B  F004         	call	___lldiv	;wreg free
   561  000912  0EFF               	movlw	255
   562  000914  2401               	addwf	?___lldiv^0,w,c
   563  000916  6E16               	movwf	Uart_Init@vx^0,c
   564  000918  0EFF               	movlw	255
   565  00091A  2002               	addwfc	(?___lldiv+1)^0,w,c
   566  00091C  6E17               	movwf	(Uart_Init@vx+1)^0,c
   567  00091E                     
   568                           ;uart.c: 20:     SPBRG = vx & 0x00FF;
   569  00091E  C016  FFAF         	movff	Uart_Init@vx,4015	;volatile
   570  000922                     
   571                           ;uart.c: 21:     SPBRGH = vx >> 8;
   572  000922  5017               	movf	(Uart_Init@vx+1)^0,w,c
   573  000924  6EB0               	movwf	176,c	;volatile
   574  000926  0012               	return		;funcret
   575  000928                     __end_of_Uart_Init:
   576                           	callstack 0
   577                           
   578 ;; *************** function ___lldiv *****************
   579 ;; Defined at:
   580 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\__lldiv.c"
   581 ;; Parameters:    Size  Location     Type
   582 ;;  dividend        4    0[COMRAM] unsigned long 
   583 ;;  divisor         4    4[COMRAM] unsigned long 
   584 ;; Auto vars:     Size  Location     Type
   585 ;;  quotient        4    8[COMRAM] unsigned long 
   586 ;;  counter         1   12[COMRAM] unsigned char 
   587 ;; Return value:  Size  Location     Type
   588 ;;                  4    0[COMRAM] unsigned long 
   589 ;; Registers used:
   590 ;;		wreg, status,2, status,0
   591 ;; Tracked objects:
   592 ;;		On entry : 0/0
   593 ;;		On exit  : 0/0
   594 ;;		Unchanged: 0/0
   595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   596 ;;      Params:         8       0       0       0       0       0       0       0       0
   597 ;;      Locals:         5       0       0       0       0       0       0       0       0
   598 ;;      Temps:          0       0       0       0       0       0       0       0       0
   599 ;;      Totals:        13       0       0       0       0       0       0       0       0
   600 ;;Total ram usage:       13 bytes
   601 ;; Hardware stack levels used: 1
   602 ;; This function calls:
   603 ;;		Nothing
   604 ;; This function is called by:
   605 ;;		_Uart_Init
   606 ;; This function uses a non-reentrant model
   607 ;;
   608                           
   609                           	psect	text5
   610  000816                     __ptext5:
   611                           	callstack 0
   612  000816                     ___lldiv:
   613                           	callstack 29
   614  000816  0E00               	movlw	0
   615  000818  6E09               	movwf	___lldiv@quotient^0,c
   616  00081A  0E00               	movlw	0
   617  00081C  6E0A               	movwf	(___lldiv@quotient+1)^0,c
   618  00081E  0E00               	movlw	0
   619  000820  6E0B               	movwf	(___lldiv@quotient+2)^0,c
   620  000822  0E00               	movlw	0
   621  000824  6E0C               	movwf	(___lldiv@quotient+3)^0,c
   622  000826  5005               	movf	___lldiv@divisor^0,w,c
   623  000828  1006               	iorwf	(___lldiv@divisor+1)^0,w,c
   624  00082A  1007               	iorwf	(___lldiv@divisor+2)^0,w,c
   625  00082C  1008               	iorwf	(___lldiv@divisor+3)^0,w,c
   626  00082E  B4D8               	btfsc	status,2,c
   627  000830  EF1C  F004         	goto	u161
   628  000834  EF1E  F004         	goto	u160
   629  000838                     u161:
   630  000838  EF54  F004         	goto	l121
   631  00083C                     u160:
   632  00083C  0E01               	movlw	1
   633  00083E  6E0D               	movwf	___lldiv@counter^0,c
   634  000840  EF28  F004         	goto	l885
   635  000844                     l883:
   636  000844  90D8               	bcf	status,0,c
   637  000846  3605               	rlcf	___lldiv@divisor^0,f,c
   638  000848  3606               	rlcf	(___lldiv@divisor+1)^0,f,c
   639  00084A  3607               	rlcf	(___lldiv@divisor+2)^0,f,c
   640  00084C  3608               	rlcf	(___lldiv@divisor+3)^0,f,c
   641  00084E  2A0D               	incf	___lldiv@counter^0,f,c
   642  000850                     l885:
   643  000850  AE08               	btfss	(___lldiv@divisor+3)^0,7,c
   644  000852  EF2D  F004         	goto	u171
   645  000856  EF2F  F004         	goto	u170
   646  00085A                     u171:
   647  00085A  EF22  F004         	goto	l883
   648  00085E                     u170:
   649  00085E                     l887:
   650  00085E  90D8               	bcf	status,0,c
   651  000860  3609               	rlcf	___lldiv@quotient^0,f,c
   652  000862  360A               	rlcf	(___lldiv@quotient+1)^0,f,c
   653  000864  360B               	rlcf	(___lldiv@quotient+2)^0,f,c
   654  000866  360C               	rlcf	(___lldiv@quotient+3)^0,f,c
   655  000868  5005               	movf	___lldiv@divisor^0,w,c
   656  00086A  5C01               	subwf	___lldiv@dividend^0,w,c
   657  00086C  5006               	movf	(___lldiv@divisor+1)^0,w,c
   658  00086E  5802               	subwfb	(___lldiv@dividend+1)^0,w,c
   659  000870  5007               	movf	(___lldiv@divisor+2)^0,w,c
   660  000872  5803               	subwfb	(___lldiv@dividend+2)^0,w,c
   661  000874  5008               	movf	(___lldiv@divisor+3)^0,w,c
   662  000876  5804               	subwfb	(___lldiv@dividend+3)^0,w,c
   663  000878  A0D8               	btfss	status,0,c
   664  00087A  EF41  F004         	goto	u181
   665  00087E  EF43  F004         	goto	u180
   666  000882                     u181:
   667  000882  EF4C  F004         	goto	l895
   668  000886                     u180:
   669  000886  5005               	movf	___lldiv@divisor^0,w,c
   670  000888  5E01               	subwf	___lldiv@dividend^0,f,c
   671  00088A  5006               	movf	(___lldiv@divisor+1)^0,w,c
   672  00088C  5A02               	subwfb	(___lldiv@dividend+1)^0,f,c
   673  00088E  5007               	movf	(___lldiv@divisor+2)^0,w,c
   674  000890  5A03               	subwfb	(___lldiv@dividend+2)^0,f,c
   675  000892  5008               	movf	(___lldiv@divisor+3)^0,w,c
   676  000894  5A04               	subwfb	(___lldiv@dividend+3)^0,f,c
   677  000896  8009               	bsf	___lldiv@quotient^0,0,c
   678  000898                     l895:
   679  000898  90D8               	bcf	status,0,c
   680  00089A  3208               	rrcf	(___lldiv@divisor+3)^0,f,c
   681  00089C  3207               	rrcf	(___lldiv@divisor+2)^0,f,c
   682  00089E  3206               	rrcf	(___lldiv@divisor+1)^0,f,c
   683  0008A0  3205               	rrcf	___lldiv@divisor^0,f,c
   684  0008A2  2E0D               	decfsz	___lldiv@counter^0,f,c
   685  0008A4  EF2F  F004         	goto	l887
   686  0008A8                     l121:
   687  0008A8  C009  F001         	movff	___lldiv@quotient,?___lldiv
   688  0008AC  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
   689  0008B0  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
   690  0008B4  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
   691  0008B8  0012               	return		;funcret
   692  0008BA                     __end_of___lldiv:
   693                           	callstack 0
   694                           
   695 ;; *************** function _Uart_Available *****************
   696 ;; Defined at:
   697 ;;		line 24 in file "uart.c"
   698 ;; Parameters:    Size  Location     Type
   699 ;;		None
   700 ;; Auto vars:     Size  Location     Type
   701 ;;		None
   702 ;; Return value:  Size  Location     Type
   703 ;;                  2    0[COMRAM] short 
   704 ;; Registers used:
   705 ;;		wreg, status,2
   706 ;; Tracked objects:
   707 ;;		On entry : 0/0
   708 ;;		On exit  : 0/0
   709 ;;		Unchanged: 0/0
   710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   711 ;;      Params:         2       0       0       0       0       0       0       0       0
   712 ;;      Locals:         0       0       0       0       0       0       0       0       0
   713 ;;      Temps:          1       0       0       0       0       0       0       0       0
   714 ;;      Totals:         3       0       0       0       0       0       0       0       0
   715 ;;Total ram usage:        3 bytes
   716 ;; Hardware stack levels used: 1
   717 ;; This function calls:
   718 ;;		Nothing
   719 ;; This function is called by:
   720 ;;		_main
   721 ;; This function uses a non-reentrant model
   722 ;;
   723                           
   724                           	psect	text6
   725  0009E6                     __ptext6:
   726                           	callstack 0
   727  0009E6                     _Uart_Available:
   728                           	callstack 30
   729  0009E6                     
   730                           ;uart.c: 26:     return PIR1bits.RCIF ? 1 : 0;
   731  0009E6  BA9E               	btfsc	158,5,c	;volatile
   732  0009E8  EFF8  F004         	goto	u201
   733  0009EC  EFFC  F004         	goto	u200
   734  0009F0                     u201:
   735  0009F0  6A03               	clrf	??_Uart_Available^0,c
   736  0009F2  2A03               	incf	??_Uart_Available^0,f,c
   737  0009F4  EFFD  F004         	goto	u208
   738  0009F8                     u200:
   739  0009F8  6A03               	clrf	??_Uart_Available^0,c
   740  0009FA                     u208:
   741  0009FA  5003               	movf	??_Uart_Available^0,w,c
   742  0009FC  6E01               	movwf	?_Uart_Available^0,c
   743  0009FE  6A02               	clrf	(?_Uart_Available+1)^0,c
   744  000A00  0012               	return		;funcret
   745  000A02                     __end_of_Uart_Available:
   746                           	callstack 0
   747                           
   748                           	psect	rparam
   749  0000                     
   750                           	psect	idloc
   751                           
   752                           ;Config register IDLOC0 @ 0x200000
   753                           ;	unspecified, using default values
   754  200000                     	org	2097152
   755  200000  FF                 	db	255
   756                           
   757                           ;Config register IDLOC1 @ 0x200001
   758                           ;	unspecified, using default values
   759  200001                     	org	2097153
   760  200001  FF                 	db	255
   761                           
   762                           ;Config register IDLOC2 @ 0x200002
   763                           ;	unspecified, using default values
   764  200002                     	org	2097154
   765  200002  FF                 	db	255
   766                           
   767                           ;Config register IDLOC3 @ 0x200003
   768                           ;	unspecified, using default values
   769  200003                     	org	2097155
   770  200003  FF                 	db	255
   771                           
   772                           ;Config register IDLOC4 @ 0x200004
   773                           ;	unspecified, using default values
   774  200004                     	org	2097156
   775  200004  FF                 	db	255
   776                           
   777                           ;Config register IDLOC5 @ 0x200005
   778                           ;	unspecified, using default values
   779  200005                     	org	2097157
   780  200005  FF                 	db	255
   781                           
   782                           ;Config register IDLOC6 @ 0x200006
   783                           ;	unspecified, using default values
   784  200006                     	org	2097158
   785  200006  FF                 	db	255
   786                           
   787                           ;Config register IDLOC7 @ 0x200007
   788                           ;	unspecified, using default values
   789  200007                     	org	2097159
   790  200007  FF                 	db	255
   791                           
   792                           	psect	config
   793                           
   794                           ;Config register CONFIG1L @ 0x300000
   795                           ;	PLL Prescaler Selection bits
   796                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
   797                           ;	System Clock Postscaler Selection bits
   798                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   799                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   800                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
   801  300000                     	org	3145728
   802  300000  21                 	db	33
   803                           
   804                           ;Config register CONFIG1H @ 0x300001
   805                           ;	Oscillator Selection bits
   806                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
   807                           ;	Fail-Safe Clock Monitor Enable bit
   808                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   809                           ;	Internal/External Oscillator Switchover bit
   810                           ;	IESO = OFF, Oscillator Switchover mode disabled
   811  300001                     	org	3145729
   812  300001  0E                 	db	14
   813                           
   814                           ;Config register CONFIG2L @ 0x300002
   815                           ;	Power-up Timer Enable bit
   816                           ;	PWRT = OFF, PWRT disabled
   817                           ;	Brown-out Reset Enable bits
   818                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   819                           ;	Brown-out Reset Voltage bits
   820                           ;	BORV = 3, Minimum setting 2.05V
   821                           ;	USB Voltage Regulator Enable bit
   822                           ;	VREGEN = OFF, USB voltage regulator disabled
   823  300002                     	org	3145730
   824  300002  19                 	db	25
   825                           
   826                           ;Config register CONFIG2H @ 0x300003
   827                           ;	Watchdog Timer Enable bit
   828                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   829                           ;	Watchdog Timer Postscale Select bits
   830                           ;	WDTPS = 32768, 1:32768
   831  300003                     	org	3145731
   832  300003  1E                 	db	30
   833                           
   834                           ; Padding undefined space
   835  300004                     	org	3145732
   836  300004  FF                 	db	255
   837                           
   838                           ;Config register CONFIG3H @ 0x300005
   839                           ;	CCP2 MUX bit
   840                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   841                           ;	PORTB A/D Enable bit
   842                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   843                           ;	Low-Power Timer 1 Oscillator Enable bit
   844                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   845                           ;	MCLR Pin Enable bit
   846                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   847  300005                     	org	3145733
   848  300005  81                 	db	129
   849                           
   850                           ;Config register CONFIG4L @ 0x300006
   851                           ;	Stack Full/Underflow Reset Enable bit
   852                           ;	STVREN = ON, Stack full/underflow will cause Reset
   853                           ;	Single-Supply ICSP Enable bit
   854                           ;	LVP = OFF, Single-Supply ICSP disabled
   855                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   856                           ;	ICPRT = OFF, ICPORT disabled
   857                           ;	Extended Instruction Set Enable bit
   858                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   859                           ;	Background Debugger Enable bit
   860                           ;	DEBUG = 0x1, unprogrammed default
   861  300006                     	org	3145734
   862  300006  81                 	db	129
   863                           
   864                           ; Padding undefined space
   865  300007                     	org	3145735
   866  300007  FF                 	db	255
   867                           
   868                           ;Config register CONFIG5L @ 0x300008
   869                           ;	Code Protection bit
   870                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   871                           ;	Code Protection bit
   872                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   873                           ;	Code Protection bit
   874                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   875                           ;	Code Protection bit
   876                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   877  300008                     	org	3145736
   878  300008  0F                 	db	15
   879                           
   880                           ;Config register CONFIG5H @ 0x300009
   881                           ;	Boot Block Code Protection bit
   882                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   883                           ;	Data EEPROM Code Protection bit
   884                           ;	CPD = OFF, Data EEPROM is not code-protected
   885  300009                     	org	3145737
   886  300009  C0                 	db	192
   887                           
   888                           ;Config register CONFIG6L @ 0x30000A
   889                           ;	Write Protection bit
   890                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   891                           ;	Write Protection bit
   892                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   893                           ;	Write Protection bit
   894                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   895                           ;	Write Protection bit
   896                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   897  30000A                     	org	3145738
   898  30000A  0F                 	db	15
   899                           
   900                           ;Config register CONFIG6H @ 0x30000B
   901                           ;	Configuration Register Write Protection bit
   902                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   903                           ;	Boot Block Write Protection bit
   904                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   905                           ;	Data EEPROM Write Protection bit
   906                           ;	WRTD = OFF, Data EEPROM is not write-protected
   907  30000B                     	org	3145739
   908  30000B  E0                 	db	224
   909                           
   910                           ;Config register CONFIG7L @ 0x30000C
   911                           ;	Table Read Protection bit
   912                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   913                           ;	Table Read Protection bit
   914                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   915                           ;	Table Read Protection bit
   916                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   917                           ;	Table Read Protection bit
   918                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   919  30000C                     	org	3145740
   920  30000C  0F                 	db	15
   921                           
   922                           ;Config register CONFIG7H @ 0x30000D
   923                           ;	Boot Block Table Read Protection bit
   924                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   925  30000D                     	org	3145741
   926  30000D  40                 	db	64
   927                           tosu	equ	0xFFF
   928                           tosh	equ	0xFFE
   929                           tosl	equ	0xFFD
   930                           stkptr	equ	0xFFC
   931                           pclatu	equ	0xFFB
   932                           pclath	equ	0xFFA
   933                           pcl	equ	0xFF9
   934                           tblptru	equ	0xFF8
   935                           tblptrh	equ	0xFF7
   936                           tblptrl	equ	0xFF6
   937                           tablat	equ	0xFF5
   938                           prodh	equ	0xFF4
   939                           prodl	equ	0xFF3
   940                           indf0	equ	0xFEF
   941                           postinc0	equ	0xFEE
   942                           postdec0	equ	0xFED
   943                           preinc0	equ	0xFEC
   944                           plusw0	equ	0xFEB
   945                           fsr0h	equ	0xFEA
   946                           fsr0l	equ	0xFE9
   947                           wreg	equ	0xFE8
   948                           indf1	equ	0xFE7
   949                           postinc1	equ	0xFE6
   950                           postdec1	equ	0xFE5
   951                           preinc1	equ	0xFE4
   952                           plusw1	equ	0xFE3
   953                           fsr1h	equ	0xFE2
   954                           fsr1l	equ	0xFE1
   955                           bsr	equ	0xFE0
   956                           indf2	equ	0xFDF
   957                           postinc2	equ	0xFDE
   958                           postdec2	equ	0xFDD
   959                           preinc2	equ	0xFDC
   960                           plusw2	equ	0xFDB
   961                           fsr2h	equ	0xFDA
   962                           fsr2l	equ	0xFD9
   963                           status	equ	0xFD8

Data Sizes:
    Strings     19
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     23      24
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Uart_Send_String@info	PTR unsigned char  size(2) Largest target is 16
		 -> STR_2(CODE[3]), STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_Uart_Init
    _Uart_Send_String->_Uart_Send_Char
    _Uart_Init->___lldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     684
                     _Uart_Available
                          _Uart_Init
                          _Uart_Read
                     _Uart_Send_Char
                   _Uart_Send_String
 ---------------------------------------------------------------------------------
 (1) _Uart_Send_String                                     2     0      2     212
                                              1 COMRAM     2     0      2
                     _Uart_Send_Char
 ---------------------------------------------------------------------------------
 (2) _Uart_Send_Char                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Uart_Read                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Uart_Init                                           10     6      4     457
                                             13 COMRAM    10     6      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _Uart_Available                                       3     1      2       0
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Uart_Available
   _Uart_Init
     ___lldiv
   _Uart_Read
   _Uart_Send_Char
   _Uart_Send_String
     _Uart_Send_Char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     17      18       1       25.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      18      20        0.0%
DATA                 0      0      18       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Sep 30 17:23:18 2021

                       l50 0926                         l53 0A00                         l70 09CE  
                       l71 09E0                         l72 09E4                         l56 0A04  
                       l65 09BE                         l59 0A16                         l68 09C0  
                       u10 0A12                         u11 0A0E                         u70 09CE  
                       u71 09CA                         u80 09DC                         u81 09D8  
  __size_of_Uart_Send_Char 0016                        l121 08A8                        l128 08B8  
                      l811 09DC                        l901 08BE                        l813 09E2  
                      l911 09E6                        l903 08CA                        l905 08CC  
                      l809 09C0                        l921 09A2                        l907 091E  
                      l915 098A                        l931 0964                        l923 0928  
                      l909 0922                        l917 098E                        l933 0970  
                      l925 092C                        l767 0A04                        l919 099E  
                      l927 0940                        l881 083C                        l769 0A12  
                      l929 095E                        l891 0886                        l883 0844  
                      l893 0896                        l885 0850                        l877 0816  
                      l895 0898                        l887 085E                        l879 0826  
                      l897 08A2                        l889 0868                        l899 08BA  
                      u200 09F8                        u201 09F0                        u210 09BE  
                      u211 09BA                        u220 095E                        u221 095A  
                      u208 09FA                        u160 083C                        u161 0838  
                      u170 085E                        u171 085A                        u180 0886  
                      u181 0882                        u195 08EE                        wreg 000FE8  
                     STR_1 0801                       STR_2 0811                       _main 0928  
                     start 0000               ___param_bank 000000                      ?_main 0001  
          __end_of___lldiv 08BA                      _RCREG 000FAE                      _RCSTA 000FAB  
                    _SPBRG 000FAF                      _TXREG 000FAD                      _TXSTA 000FAC  
                    tablat 000FF5   __end_of_Uart_Send_String 09C0                      status 000FD8  
          __initialization 0A18               __end_of_main 098A                     ??_main 0018  
            __activetblptr 000001             _Uart_Available 09E6                     _SPBRGH 000FB0  
                ??___lldiv 0009                     isa$std 000001             _Uart_Send_Char 0A02  
       __size_of_Uart_Init 006E         __size_of_Uart_Read 0026               __mediumconst 0000  
   __end_of_Uart_Available 0A02                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                 __accesstop 0060    __end_of__initialization 0A1A  
            ___rparam_used 000001             __pcstackCOMRAM 0001     __end_of_Uart_Send_Char 0A18  
          ?_Uart_Available 0001          __end_of_Uart_Init 0928          __end_of_Uart_Read 09E6  
          ?_Uart_Send_Char 0001                    _BAUDCON 000FB8                Uart_Init@vx 0016  
        ?_Uart_Send_String 0002       Uart_Send_Char@txData 0001         ??_Uart_Send_String 0004  
                  __Hparam 0000                    __Lparam 0000                    ___lldiv 0816  
             __psmallconst 0800                    __pcinit 0A18                    __ramtop 0800  
                  _dato_rx 0018                    __ptext0 0928                    __ptext1 098A  
                  __ptext2 0A02                    __ptext3 09C0                    __ptext4 08BA  
                  __ptext5 0816                    __ptext6 09E6       end_of_initialization 0A1A  
          ___lldiv@divisor 0005              Uart_Init@baud 000E            ___lldiv@counter 000D  
                _RCSTAbits 000FAB                  _TRISCbits 000F94                  _TXSTAbits 000FAC  
              _BAUDCONbits 000FB8           ??_Uart_Available 0003        start_initialization 0A18  
         ??_Uart_Send_Char 0001                  _Uart_Init 08BA                  _Uart_Read 09C0  
              __pbssCOMRAM 0018                 ?_Uart_Init 000E                 ?_Uart_Read 0001  
                 ?___lldiv 0001  __size_of_Uart_Send_String 0036                __smallconst 0800  
                 _PIR1bits 000F9E                 _ADCON1bits 000FC1                   __Hrparam 0000  
              ??_Uart_Init 0012                ??_Uart_Read 0001                   __Lrparam 0000  
             __Lsmallconst 0800           __size_of___lldiv 00A4       Uart_Send_String@info 0002  
            __size_of_main 0062                   isa$xinst 000000           _Uart_Send_String 098A  
         ___lldiv@dividend 0001           ___lldiv@quotient 0009    __size_of_Uart_Available 001C  
