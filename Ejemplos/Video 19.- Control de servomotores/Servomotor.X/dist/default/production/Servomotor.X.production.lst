

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Sep 30 16:44:46 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    13                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    17                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    19  0000                     
    20                           ; Version 2.20
    21                           ; Generated 12/02/2020 GMT
    22                           ; 
    23                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F4550 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     _TMR0	set	4054
    55  0000                     _T0CONbits	set	4053
    56  0000                     _T0CON	set	4053
    57  0000                     _INTCONbits	set	4082
    58  0000                     _LATDbits	set	3980
    59  0000                     _TRISDbits	set	3989
    60  0000                     _ADCON1bits	set	4033
    61                           
    62                           ; #config settings
    63                           
    64                           	psect	cinit
    65  0001DC                     __pcinit:
    66                           	callstack 0
    67  0001DC                     start_initialization:
    68                           	callstack 0
    69  0001DC                     __initialization:
    70                           	callstack 0
    71                           
    72                           ; Clear objects allocated to COMRAM (10 bytes)
    73  0001DC  EE00  F00C         	lfsr	0,__pbssCOMRAM
    74  0001E0  0E0A               	movlw	10
    75  0001E2                     clear_0:
    76  0001E2  6AEE               	clrf	postinc0,c
    77  0001E4  06E8               	decf	wreg,f,c
    78  0001E6  E1FD               	bnz	clear_0
    79  0001E8                     end_of_initialization:
    80                           	callstack 0
    81  0001E8                     __end_of__initialization:
    82                           	callstack 0
    83  0001E8  9016               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    84  0001EA  9216               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    85  0001EC  0100               	movlb	0
    86  0001EE  EF9E  F000         	goto	_main	;jump to C main() function
    87                           
    88                           	psect	bssCOMRAM
    89  00000C                     __pbssCOMRAM:
    90                           	callstack 0
    91  00000C                     _data_s:
    92                           	callstack 0
    93  00000C                     	ds	8
    94  000014                     _cont_sr:
    95                           	callstack 0
    96  000014                     	ds	2
    97                           
    98                           	psect	cstackCOMRAM
    99  000001                     __pcstackCOMRAM:
   100                           	callstack 0
   101  000001                     ?___awdiv:
   102                           	callstack 0
   103  000001                     ___awdiv@dividend:
   104                           	callstack 0
   105                           
   106                           ; 2 bytes @ 0x0
   107  000001                     	ds	2
   108  000003                     ___awdiv@divisor:
   109                           	callstack 0
   110                           
   111                           ; 2 bytes @ 0x2
   112  000003                     	ds	2
   113  000005                     ___awdiv@counter:
   114                           	callstack 0
   115                           
   116                           ; 1 bytes @ 0x4
   117  000005                     	ds	1
   118  000006                     ___awdiv@sign:
   119                           	callstack 0
   120                           
   121                           ; 1 bytes @ 0x5
   122  000006                     	ds	1
   123  000007                     ___awdiv@quotient:
   124                           	callstack 0
   125                           
   126                           ; 2 bytes @ 0x6
   127  000007                     	ds	2
   128  000009                     Servo_1_Write@ang:
   129                           	callstack 0
   130                           
   131                           ; 1 bytes @ 0x8
   132  000009                     	ds	1
   133  00000A                     ??_main:
   134                           
   135                           ; 1 bytes @ 0x9
   136  00000A                     	ds	2
   137                           
   138 ;;
   139 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   140 ;;
   141 ;; *************** function _main *****************
   142 ;; Defined at:
   143 ;;		line 20 in file "Servomotor.c"
   144 ;; Parameters:    Size  Location     Type
   145 ;;		None
   146 ;; Auto vars:     Size  Location     Type
   147 ;;		None
   148 ;; Return value:  Size  Location     Type
   149 ;;                  1    wreg      void 
   150 ;; Registers used:
   151 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   152 ;; Tracked objects:
   153 ;;		On entry : 0/0
   154 ;;		On exit  : 0/0
   155 ;;		Unchanged: 0/0
   156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   157 ;;      Params:         0       0       0       0       0       0       0       0       0
   158 ;;      Locals:         0       0       0       0       0       0       0       0       0
   159 ;;      Temps:          2       0       0       0       0       0       0       0       0
   160 ;;      Totals:         2       0       0       0       0       0       0       0       0
   161 ;;Total ram usage:        2 bytes
   162 ;; Hardware stack levels required when called: 3
   163 ;; This function calls:
   164 ;;		_Servo_1_Write
   165 ;;		_Servo_Init
   166 ;; This function is called by:
   167 ;;		Startup code after reset
   168 ;; This function uses a non-reentrant model
   169 ;;
   170                           
   171                           	psect	text0
   172  00013C                     __ptext0:
   173                           	callstack 0
   174  00013C                     _main:
   175                           	callstack 28
   176  00013C                     
   177                           ;Servomotor.c: 22:     ADCON1bits.PCFG = 0x0F;
   178  00013C  0E0F               	movlw	15
   179  00013E  12C1               	iorwf	193,f,c	;volatile
   180  000140                     
   181                           ;Servomotor.c: 23:     Servo_Init();
   182  000140  ECE1  F000         	call	_Servo_Init	;wreg free
   183  000144                     l855:
   184                           
   185                           ;Servomotor.c: 26:     {;Servomotor.c: 27:         Servo_1_Write(0);
   186  000144  0E00               	movlw	0
   187  000146  ECD0  F000         	call	_Servo_1_Write
   188  00014A                     
   189                           ;Servomotor.c: 28:         _delay((unsigned long)((1000)*(48000000/4000.0)));
   190  00014A  0E3D               	movlw	61
   191  00014C  6E0B               	movwf	(??_main+1)^0,c
   192  00014E  0EE1               	movlw	225
   193  000150  6E0A               	movwf	??_main^0,c
   194  000152  0E40               	movlw	64
   195  000154                     u167:
   196  000154  2EE8               	decfsz	wreg,f,c
   197  000156  D7FE               	bra	u167
   198  000158  2E0A               	decfsz	??_main^0,f,c
   199  00015A  D7FC               	bra	u167
   200  00015C  2E0B               	decfsz	(??_main+1)^0,f,c
   201  00015E  D7FA               	bra	u167
   202  000160                     
   203                           ;Servomotor.c: 30:         Servo_1_Write(90);
   204  000160  0E5A               	movlw	90
   205  000162  ECD0  F000         	call	_Servo_1_Write
   206  000166                     
   207                           ;Servomotor.c: 31:         _delay((unsigned long)((1000)*(48000000/4000.0)));
   208  000166  0E3D               	movlw	61
   209  000168  6E0B               	movwf	(??_main+1)^0,c
   210  00016A  0EE1               	movlw	225
   211  00016C  6E0A               	movwf	??_main^0,c
   212  00016E  0E40               	movlw	64
   213  000170                     u177:
   214  000170  2EE8               	decfsz	wreg,f,c
   215  000172  D7FE               	bra	u177
   216  000174  2E0A               	decfsz	??_main^0,f,c
   217  000176  D7FC               	bra	u177
   218  000178  2E0B               	decfsz	(??_main+1)^0,f,c
   219  00017A  D7FA               	bra	u177
   220  00017C                     
   221                           ;Servomotor.c: 33:         Servo_1_Write(180);
   222  00017C  0EB4               	movlw	180
   223  00017E  ECD0  F000         	call	_Servo_1_Write
   224  000182                     
   225                           ;Servomotor.c: 34:         _delay((unsigned long)((1000)*(48000000/4000.0)));
   226  000182  0E3D               	movlw	61
   227  000184  6E0B               	movwf	(??_main+1)^0,c
   228  000186  0EE1               	movlw	225
   229  000188  6E0A               	movwf	??_main^0,c
   230  00018A  0E40               	movlw	64
   231  00018C                     u187:
   232  00018C  2EE8               	decfsz	wreg,f,c
   233  00018E  D7FE               	bra	u187
   234  000190  2E0A               	decfsz	??_main^0,f,c
   235  000192  D7FC               	bra	u187
   236  000194  2E0B               	decfsz	(??_main+1)^0,f,c
   237  000196  D7FA               	bra	u187
   238  000198  EFA2  F000         	goto	l855
   239  00019C  EF07  F000         	goto	start
   240  0001A0                     __end_of_main:
   241                           	callstack 0
   242                           
   243 ;; *************** function _Servo_Init *****************
   244 ;; Defined at:
   245 ;;		line 14 in file "servo.c"
   246 ;; Parameters:    Size  Location     Type
   247 ;;		None
   248 ;; Auto vars:     Size  Location     Type
   249 ;;		None
   250 ;; Return value:  Size  Location     Type
   251 ;;                  1    wreg      void 
   252 ;; Registers used:
   253 ;;		wreg, status,2
   254 ;; Tracked objects:
   255 ;;		On entry : 0/0
   256 ;;		On exit  : 0/0
   257 ;;		Unchanged: 0/0
   258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   259 ;;      Params:         0       0       0       0       0       0       0       0       0
   260 ;;      Locals:         0       0       0       0       0       0       0       0       0
   261 ;;      Temps:          0       0       0       0       0       0       0       0       0
   262 ;;      Totals:         0       0       0       0       0       0       0       0       0
   263 ;;Total ram usage:        0 bytes
   264 ;; Hardware stack levels used: 1
   265 ;; Hardware stack levels required when called: 1
   266 ;; This function calls:
   267 ;;		Nothing
   268 ;; This function is called by:
   269 ;;		_main
   270 ;; This function uses a non-reentrant model
   271 ;;
   272                           
   273                           	psect	text1
   274  0001C2                     __ptext1:
   275                           	callstack 0
   276  0001C2                     _Servo_Init:
   277                           	callstack 29
   278  0001C2                     
   279                           ;servo.c: 17:     TRISDbits.RD0 = 0;
   280  0001C2  9095               	bcf	149,0,c	;volatile
   281                           
   282                           ;servo.c: 18:     LATDbits.LD0 = 0;
   283  0001C4  908C               	bcf	140,0,c	;volatile
   284                           
   285                           ;servo.c: 56:     INTCONbits.GIE = 1;
   286  0001C6  8EF2               	bsf	242,7,c	;volatile
   287                           
   288                           ;servo.c: 57:     INTCONbits.TMR0IE = 1;
   289  0001C8  8AF2               	bsf	242,5,c	;volatile
   290                           
   291                           ;servo.c: 58:     INTCONbits.TMR0IF = 0;
   292  0001CA  94F2               	bcf	242,2,c	;volatile
   293  0001CC                     
   294                           ;servo.c: 59:     T0CON = 0x50;
   295  0001CC  0E50               	movlw	80
   296  0001CE  6ED5               	movwf	213,c	;volatile
   297  0001D0                     
   298                           ;servo.c: 60:     T0CONbits.TMR0ON = 1;
   299  0001D0  8ED5               	bsf	213,7,c	;volatile
   300                           
   301                           ;servo.c: 61:     TMR0 = 50;
   302  0001D2  0E00               	movlw	0
   303  0001D4  6ED7               	movwf	215,c	;volatile
   304  0001D6  0E32               	movlw	50
   305  0001D8  6ED6               	movwf	214,c	;volatile
   306  0001DA  0012               	return		;funcret
   307  0001DC                     __end_of_Servo_Init:
   308                           	callstack 0
   309                           
   310 ;; *************** function _Servo_1_Write *****************
   311 ;; Defined at:
   312 ;;		line 65 in file "servo.c"
   313 ;; Parameters:    Size  Location     Type
   314 ;;  ang             1    wreg     unsigned char 
   315 ;; Auto vars:     Size  Location     Type
   316 ;;  ang             1    8[COMRAM] unsigned char 
   317 ;; Return value:  Size  Location     Type
   318 ;;                  1    wreg      void 
   319 ;; Registers used:
   320 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   321 ;; Tracked objects:
   322 ;;		On entry : 0/0
   323 ;;		On exit  : 0/0
   324 ;;		Unchanged: 0/0
   325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   326 ;;      Params:         0       0       0       0       0       0       0       0       0
   327 ;;      Locals:         1       0       0       0       0       0       0       0       0
   328 ;;      Temps:          0       0       0       0       0       0       0       0       0
   329 ;;      Totals:         1       0       0       0       0       0       0       0       0
   330 ;;Total ram usage:        1 bytes
   331 ;; Hardware stack levels used: 1
   332 ;; Hardware stack levels required when called: 2
   333 ;; This function calls:
   334 ;;		___awdiv
   335 ;; This function is called by:
   336 ;;		_main
   337 ;; This function uses a non-reentrant model
   338 ;;
   339                           
   340                           	psect	text2
   341  0001A0                     __ptext2:
   342                           	callstack 0
   343  0001A0                     _Servo_1_Write:
   344                           	callstack 28
   345                           
   346                           ;incstack = 0
   347                           ;Servo_1_Write@ang stored from wreg
   348  0001A0  6E09               	movwf	Servo_1_Write@ang^0,c
   349  0001A2                     
   350                           ;servo.c: 65: void Servo_1_Write(unsigned char ang);servo.c: 66: {;servo.c: 67:     data
      +                          _s[0] = (ang-0)*(60 -14)/(180-0)+14;
   351  0001A2  5009               	movf	Servo_1_Write@ang^0,w,c
   352  0001A4  0D2E               	mullw	46
   353  0001A6  CFF3 F001          	movff	prodl,___awdiv@dividend
   354  0001AA  CFF4 F002          	movff	prodh,___awdiv@dividend+1
   355  0001AE  0E00               	movlw	0
   356  0001B0  6E04               	movwf	(___awdiv@divisor+1)^0,c
   357  0001B2  0EB4               	movlw	180
   358  0001B4  6E03               	movwf	___awdiv@divisor^0,c
   359  0001B6  EC09  F000         	call	___awdiv	;wreg free
   360  0001BA  5001               	movf	?___awdiv^0,w,c
   361  0001BC  0F0E               	addlw	14
   362  0001BE  6E0C               	movwf	_data_s^0,c
   363  0001C0  0012               	return		;funcret
   364  0001C2                     __end_of_Servo_1_Write:
   365                           	callstack 0
   366                           
   367 ;; *************** function ___awdiv *****************
   368 ;; Defined at:
   369 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
   370 ;; Parameters:    Size  Location     Type
   371 ;;  dividend        2    0[COMRAM] int 
   372 ;;  divisor         2    2[COMRAM] int 
   373 ;; Auto vars:     Size  Location     Type
   374 ;;  quotient        2    6[COMRAM] int 
   375 ;;  sign            1    5[COMRAM] unsigned char 
   376 ;;  counter         1    4[COMRAM] unsigned char 
   377 ;; Return value:  Size  Location     Type
   378 ;;                  2    0[COMRAM] int 
   379 ;; Registers used:
   380 ;;		wreg, status,2, status,0
   381 ;; Tracked objects:
   382 ;;		On entry : 0/0
   383 ;;		On exit  : 0/0
   384 ;;		Unchanged: 0/0
   385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   386 ;;      Params:         4       0       0       0       0       0       0       0       0
   387 ;;      Locals:         4       0       0       0       0       0       0       0       0
   388 ;;      Temps:          0       0       0       0       0       0       0       0       0
   389 ;;      Totals:         8       0       0       0       0       0       0       0       0
   390 ;;Total ram usage:        8 bytes
   391 ;; Hardware stack levels used: 1
   392 ;; Hardware stack levels required when called: 1
   393 ;; This function calls:
   394 ;;		Nothing
   395 ;; This function is called by:
   396 ;;		_Servo_1_Write
   397 ;; This function uses a non-reentrant model
   398 ;;
   399                           
   400                           	psect	text3
   401  000012                     __ptext3:
   402                           	callstack 0
   403  000012                     ___awdiv:
   404                           	callstack 28
   405  000012  0E00               	movlw	0
   406  000014  6E06               	movwf	___awdiv@sign^0,c
   407  000016  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
   408  000018  EF12  F000         	goto	u100
   409  00001C  EF10  F000         	goto	u101
   410  000020                     u101:
   411  000020  EF18  F000         	goto	l813
   412  000024                     u100:
   413  000024  6C03               	negf	___awdiv@divisor^0,c
   414  000026  1E04               	comf	(___awdiv@divisor+1)^0,f,c
   415  000028  B0D8               	btfsc	status,0,c
   416  00002A  2A04               	incf	(___awdiv@divisor+1)^0,f,c
   417  00002C  0E01               	movlw	1
   418  00002E  6E06               	movwf	___awdiv@sign^0,c
   419  000030                     l813:
   420  000030  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
   421  000032  EF1F  F000         	goto	u110
   422  000036  EF1D  F000         	goto	u111
   423  00003A                     u111:
   424  00003A  EF25  F000         	goto	l819
   425  00003E                     u110:
   426  00003E  6C01               	negf	___awdiv@dividend^0,c
   427  000040  1E02               	comf	(___awdiv@dividend+1)^0,f,c
   428  000042  B0D8               	btfsc	status,0,c
   429  000044  2A02               	incf	(___awdiv@dividend+1)^0,f,c
   430  000046  0E01               	movlw	1
   431  000048  1A06               	xorwf	___awdiv@sign^0,f,c
   432  00004A                     l819:
   433  00004A  0E00               	movlw	0
   434  00004C  6E08               	movwf	(___awdiv@quotient+1)^0,c
   435  00004E  0E00               	movlw	0
   436  000050  6E07               	movwf	___awdiv@quotient^0,c
   437  000052  5003               	movf	___awdiv@divisor^0,w,c
   438  000054  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
   439  000056  B4D8               	btfsc	status,2,c
   440  000058  EF30  F000         	goto	u121
   441  00005C  EF32  F000         	goto	u120
   442  000060                     u121:
   443  000060  EF5A  F000         	goto	l841
   444  000064                     u120:
   445  000064  0E01               	movlw	1
   446  000066  6E05               	movwf	___awdiv@counter^0,c
   447  000068  EF3A  F000         	goto	l827
   448  00006C                     l825:
   449  00006C  90D8               	bcf	status,0,c
   450  00006E  3603               	rlcf	___awdiv@divisor^0,f,c
   451  000070  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
   452  000072  2A05               	incf	___awdiv@counter^0,f,c
   453  000074                     l827:
   454  000074  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
   455  000076  EF3F  F000         	goto	u131
   456  00007A  EF41  F000         	goto	u130
   457  00007E                     u131:
   458  00007E  EF36  F000         	goto	l825
   459  000082                     u130:
   460  000082                     l829:
   461  000082  90D8               	bcf	status,0,c
   462  000084  3607               	rlcf	___awdiv@quotient^0,f,c
   463  000086  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
   464  000088  5003               	movf	___awdiv@divisor^0,w,c
   465  00008A  5C01               	subwf	___awdiv@dividend^0,w,c
   466  00008C  5004               	movf	(___awdiv@divisor+1)^0,w,c
   467  00008E  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
   468  000090  A0D8               	btfss	status,0,c
   469  000092  EF4D  F000         	goto	u141
   470  000096  EF4F  F000         	goto	u140
   471  00009A                     u141:
   472  00009A  EF54  F000         	goto	l837
   473  00009E                     u140:
   474  00009E  5003               	movf	___awdiv@divisor^0,w,c
   475  0000A0  5E01               	subwf	___awdiv@dividend^0,f,c
   476  0000A2  5004               	movf	(___awdiv@divisor+1)^0,w,c
   477  0000A4  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
   478  0000A6  8007               	bsf	___awdiv@quotient^0,0,c
   479  0000A8                     l837:
   480  0000A8  90D8               	bcf	status,0,c
   481  0000AA  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
   482  0000AC  3203               	rrcf	___awdiv@divisor^0,f,c
   483  0000AE  2E05               	decfsz	___awdiv@counter^0,f,c
   484  0000B0  EF41  F000         	goto	l829
   485  0000B4                     l841:
   486  0000B4  5006               	movf	___awdiv@sign^0,w,c
   487  0000B6  B4D8               	btfsc	status,2,c
   488  0000B8  EF60  F000         	goto	u151
   489  0000BC  EF62  F000         	goto	u150
   490  0000C0                     u151:
   491  0000C0  EF66  F000         	goto	l845
   492  0000C4                     u150:
   493  0000C4  6C07               	negf	___awdiv@quotient^0,c
   494  0000C6  1E08               	comf	(___awdiv@quotient+1)^0,f,c
   495  0000C8  B0D8               	btfsc	status,0,c
   496  0000CA  2A08               	incf	(___awdiv@quotient+1)^0,f,c
   497  0000CC                     l845:
   498  0000CC  C007  F001         	movff	___awdiv@quotient,?___awdiv
   499  0000D0  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
   500  0000D4  0012               	return		;funcret
   501  0000D6                     __end_of___awdiv:
   502                           	callstack 0
   503                           
   504 ;; *************** function _TMR0_ISR *****************
   505 ;; Defined at:
   506 ;;		line 121 in file "servo.c"
   507 ;; Parameters:    Size  Location     Type
   508 ;;		None
   509 ;; Auto vars:     Size  Location     Type
   510 ;;		None
   511 ;; Return value:  Size  Location     Type
   512 ;;                  1    wreg      void 
   513 ;; Registers used:
   514 ;;		wreg, status,2, status,0
   515 ;; Tracked objects:
   516 ;;		On entry : 0/0
   517 ;;		On exit  : 0/0
   518 ;;		Unchanged: 0/0
   519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   520 ;;      Params:         0       0       0       0       0       0       0       0       0
   521 ;;      Locals:         0       0       0       0       0       0       0       0       0
   522 ;;      Temps:          0       0       0       0       0       0       0       0       0
   523 ;;      Totals:         0       0       0       0       0       0       0       0       0
   524 ;;Total ram usage:        0 bytes
   525 ;; Hardware stack levels used: 1
   526 ;; This function calls:
   527 ;;		Nothing
   528 ;; This function is called by:
   529 ;;		Interrupt level 2
   530 ;; This function uses a non-reentrant model
   531 ;;
   532                           
   533                           	psect	intcode
   534  000008                     __pintcode:
   535                           	callstack 0
   536  000008                     _TMR0_ISR:
   537                           	callstack 28
   538                           
   539                           ;incstack = 0
   540  000008  8216               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   541  00000A  ED6B  F000         	call	int_func,f	;refresh shadow registers
   542                           
   543                           	psect	intcode_body
   544  0000D6                     __pintcode_body:
   545                           	callstack 28
   546  0000D6                     int_func:
   547                           	callstack 28
   548  0000D6  0006               	pop		; remove dummy address from shadow register refresh
   549  0000D8                     
   550                           ;servo.c: 123:     if(INTCONbits.TMR0IF == 1)
   551  0000D8  A4F2               	btfss	242,2,c	;volatile
   552  0000DA  EF71  F000         	goto	i2u7_41
   553  0000DE  EF73  F000         	goto	i2u7_40
   554  0000E2                     i2u7_41:
   555  0000E2  EF9C  F000         	goto	i2l47
   556  0000E6                     i2u7_40:
   557  0000E6                     
   558                           ;servo.c: 124:     {;servo.c: 125:         cont_sr = cont_sr + 1;
   559  0000E6  0E01               	movlw	1
   560  0000E8  2414               	addwf	_cont_sr^0,w,c
   561  0000EA  6E14               	movwf	_cont_sr^0,c
   562  0000EC  0E00               	movlw	0
   563  0000EE  2015               	addwfc	(_cont_sr+1)^0,w,c
   564  0000F0  6E15               	movwf	(_cont_sr+1)^0,c
   565                           
   566                           ;servo.c: 126:         if(cont_sr > 490){
   567  0000F2  0EEB               	movlw	235
   568  0000F4  5C14               	subwf	_cont_sr^0,w,c
   569  0000F6  0E01               	movlw	1
   570  0000F8  5815               	subwfb	(_cont_sr+1)^0,w,c
   571  0000FA  A0D8               	btfss	status,0,c
   572  0000FC  EF82  F000         	goto	i2u8_41
   573  000100  EF84  F000         	goto	i2u8_40
   574  000104                     i2u8_41:
   575  000104  EF88  F000         	goto	i2l797
   576  000108                     i2u8_40:
   577  000108                     
   578                           ;servo.c: 127:             cont_sr = 0;
   579  000108  0E00               	movlw	0
   580  00010A  6E15               	movwf	(_cont_sr+1)^0,c
   581  00010C  0E00               	movlw	0
   582  00010E  6E14               	movwf	_cont_sr^0,c
   583  000110                     i2l797:
   584                           
   585                           ;servo.c: 130:         if(cont_sr < data_s[0]){LATDbits.LD0 = 1;} else{LATDbits.LD0 = 0;
      +                          }
   586  000110  500C               	movf	_data_s^0,w,c
   587  000112  5C14               	subwf	_cont_sr^0,w,c
   588  000114  0E00               	movlw	0
   589  000116  5815               	subwfb	(_cont_sr+1)^0,w,c
   590  000118  B0D8               	btfsc	status,0,c
   591  00011A  EF91  F000         	goto	i2u9_41
   592  00011E  EF93  F000         	goto	i2u9_40
   593  000122                     i2u9_41:
   594  000122  EF96  F000         	goto	i2l45
   595  000126                     i2u9_40:
   596  000126  808C               	bsf	140,0,c	;volatile
   597  000128  EF97  F000         	goto	i2l801
   598  00012C                     i2l45:
   599  00012C  908C               	bcf	140,0,c	;volatile
   600  00012E                     i2l801:
   601                           
   602                           ;servo.c: 161:         TMR0 = 50;
   603  00012E  0E00               	movlw	0
   604  000130  6ED7               	movwf	215,c	;volatile
   605  000132  0E32               	movlw	50
   606  000134  6ED6               	movwf	214,c	;volatile
   607  000136                     
   608                           ;servo.c: 162:         INTCONbits.TMR0IF = 0;
   609  000136  94F2               	bcf	242,2,c	;volatile
   610  000138                     i2l47:
   611  000138  9216               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   612  00013A  0011               	retfie		f
   613  00013C                     __end_of_TMR0_ISR:
   614                           	callstack 0
   615  0000                     
   616                           	psect	rparam
   617  0000                     
   618                           	psect	temp
   619  000016                     btemp:
   620                           	callstack 0
   621  000016                     	ds	1
   622  0000                     int$flags	set	btemp
   623  0000                     wtemp8	set	btemp+1
   624  0000                     ttemp5	set	btemp+1
   625  0000                     ttemp6	set	btemp+4
   626  0000                     ttemp7	set	btemp+8
   627                           
   628                           	psect	idloc
   629                           
   630                           ;Config register IDLOC0 @ 0x200000
   631                           ;	unspecified, using default values
   632  200000                     	org	2097152
   633  200000  FF                 	db	255
   634                           
   635                           ;Config register IDLOC1 @ 0x200001
   636                           ;	unspecified, using default values
   637  200001                     	org	2097153
   638  200001  FF                 	db	255
   639                           
   640                           ;Config register IDLOC2 @ 0x200002
   641                           ;	unspecified, using default values
   642  200002                     	org	2097154
   643  200002  FF                 	db	255
   644                           
   645                           ;Config register IDLOC3 @ 0x200003
   646                           ;	unspecified, using default values
   647  200003                     	org	2097155
   648  200003  FF                 	db	255
   649                           
   650                           ;Config register IDLOC4 @ 0x200004
   651                           ;	unspecified, using default values
   652  200004                     	org	2097156
   653  200004  FF                 	db	255
   654                           
   655                           ;Config register IDLOC5 @ 0x200005
   656                           ;	unspecified, using default values
   657  200005                     	org	2097157
   658  200005  FF                 	db	255
   659                           
   660                           ;Config register IDLOC6 @ 0x200006
   661                           ;	unspecified, using default values
   662  200006                     	org	2097158
   663  200006  FF                 	db	255
   664                           
   665                           ;Config register IDLOC7 @ 0x200007
   666                           ;	unspecified, using default values
   667  200007                     	org	2097159
   668  200007  FF                 	db	255
   669                           
   670                           	psect	config
   671                           
   672                           ;Config register CONFIG1L @ 0x300000
   673                           ;	PLL Prescaler Selection bits
   674                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
   675                           ;	System Clock Postscaler Selection bits
   676                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   677                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   678                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
   679  300000                     	org	3145728
   680  300000  21                 	db	33
   681                           
   682                           ;Config register CONFIG1H @ 0x300001
   683                           ;	Oscillator Selection bits
   684                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
   685                           ;	Fail-Safe Clock Monitor Enable bit
   686                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   687                           ;	Internal/External Oscillator Switchover bit
   688                           ;	IESO = OFF, Oscillator Switchover mode disabled
   689  300001                     	org	3145729
   690  300001  0E                 	db	14
   691                           
   692                           ;Config register CONFIG2L @ 0x300002
   693                           ;	Power-up Timer Enable bit
   694                           ;	PWRT = OFF, PWRT disabled
   695                           ;	Brown-out Reset Enable bits
   696                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   697                           ;	Brown-out Reset Voltage bits
   698                           ;	BORV = 3, Minimum setting 2.05V
   699                           ;	USB Voltage Regulator Enable bit
   700                           ;	VREGEN = OFF, USB voltage regulator disabled
   701  300002                     	org	3145730
   702  300002  19                 	db	25
   703                           
   704                           ;Config register CONFIG2H @ 0x300003
   705                           ;	Watchdog Timer Enable bit
   706                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   707                           ;	Watchdog Timer Postscale Select bits
   708                           ;	WDTPS = 32768, 1:32768
   709  300003                     	org	3145731
   710  300003  1E                 	db	30
   711                           
   712                           ; Padding undefined space
   713  300004                     	org	3145732
   714  300004  FF                 	db	255
   715                           
   716                           ;Config register CONFIG3H @ 0x300005
   717                           ;	CCP2 MUX bit
   718                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   719                           ;	PORTB A/D Enable bit
   720                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   721                           ;	Low-Power Timer 1 Oscillator Enable bit
   722                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   723                           ;	MCLR Pin Enable bit
   724                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   725  300005                     	org	3145733
   726  300005  81                 	db	129
   727                           
   728                           ;Config register CONFIG4L @ 0x300006
   729                           ;	Stack Full/Underflow Reset Enable bit
   730                           ;	STVREN = ON, Stack full/underflow will cause Reset
   731                           ;	Single-Supply ICSP Enable bit
   732                           ;	LVP = OFF, Single-Supply ICSP disabled
   733                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   734                           ;	ICPRT = OFF, ICPORT disabled
   735                           ;	Extended Instruction Set Enable bit
   736                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   737                           ;	Background Debugger Enable bit
   738                           ;	DEBUG = 0x1, unprogrammed default
   739  300006                     	org	3145734
   740  300006  81                 	db	129
   741                           
   742                           ; Padding undefined space
   743  300007                     	org	3145735
   744  300007  FF                 	db	255
   745                           
   746                           ;Config register CONFIG5L @ 0x300008
   747                           ;	Code Protection bit
   748                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   749                           ;	Code Protection bit
   750                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   751                           ;	Code Protection bit
   752                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   753                           ;	Code Protection bit
   754                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   755  300008                     	org	3145736
   756  300008  0F                 	db	15
   757                           
   758                           ;Config register CONFIG5H @ 0x300009
   759                           ;	Boot Block Code Protection bit
   760                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   761                           ;	Data EEPROM Code Protection bit
   762                           ;	CPD = OFF, Data EEPROM is not code-protected
   763  300009                     	org	3145737
   764  300009  C0                 	db	192
   765                           
   766                           ;Config register CONFIG6L @ 0x30000A
   767                           ;	Write Protection bit
   768                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   769                           ;	Write Protection bit
   770                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   771                           ;	Write Protection bit
   772                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   773                           ;	Write Protection bit
   774                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   775  30000A                     	org	3145738
   776  30000A  0F                 	db	15
   777                           
   778                           ;Config register CONFIG6H @ 0x30000B
   779                           ;	Configuration Register Write Protection bit
   780                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   781                           ;	Boot Block Write Protection bit
   782                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   783                           ;	Data EEPROM Write Protection bit
   784                           ;	WRTD = OFF, Data EEPROM is not write-protected
   785  30000B                     	org	3145739
   786  30000B  E0                 	db	224
   787                           
   788                           ;Config register CONFIG7L @ 0x30000C
   789                           ;	Table Read Protection bit
   790                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   791                           ;	Table Read Protection bit
   792                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   793                           ;	Table Read Protection bit
   794                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   795                           ;	Table Read Protection bit
   796                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   797  30000C                     	org	3145740
   798  30000C  0F                 	db	15
   799                           
   800                           ;Config register CONFIG7H @ 0x30000D
   801                           ;	Boot Block Table Read Protection bit
   802                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   803  30000D                     	org	3145741
   804  30000D  40                 	db	64
   805                           tosu	equ	0xFFF
   806                           tosh	equ	0xFFE
   807                           tosl	equ	0xFFD
   808                           stkptr	equ	0xFFC
   809                           pclatu	equ	0xFFB
   810                           pclath	equ	0xFFA
   811                           pcl	equ	0xFF9
   812                           tblptru	equ	0xFF8
   813                           tblptrh	equ	0xFF7
   814                           tblptrl	equ	0xFF6
   815                           tablat	equ	0xFF5
   816                           prodh	equ	0xFF4
   817                           prodl	equ	0xFF3
   818                           indf0	equ	0xFEF
   819                           postinc0	equ	0xFEE
   820                           postdec0	equ	0xFED
   821                           preinc0	equ	0xFEC
   822                           plusw0	equ	0xFEB
   823                           fsr0h	equ	0xFEA
   824                           fsr0l	equ	0xFE9
   825                           wreg	equ	0xFE8
   826                           indf1	equ	0xFE7
   827                           postinc1	equ	0xFE6
   828                           postdec1	equ	0xFE5
   829                           preinc1	equ	0xFE4
   830                           plusw1	equ	0xFE3
   831                           fsr1h	equ	0xFE2
   832                           fsr1l	equ	0xFE1
   833                           bsr	equ	0xFE0
   834                           indf2	equ	0xFDF
   835                           postinc2	equ	0xFDE
   836                           postdec2	equ	0xFDD
   837                           preinc2	equ	0xFDC
   838                           plusw2	equ	0xFDB
   839                           fsr2h	equ	0xFDA
   840                           fsr2l	equ	0xFD9
   841                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     11      21
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_Servo_1_Write
    _Servo_1_Write->___awdiv

Critical Paths under _TMR0_ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _TMR0_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TMR0_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMR0_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMR0_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TMR0_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TMR0_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _TMR0_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _TMR0_ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     474
                                              9 COMRAM     2     2      0
                      _Servo_1_Write
                         _Servo_Init
 ---------------------------------------------------------------------------------
 (1) _Servo_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Servo_1_Write                                        1     1      0     474
                                              8 COMRAM     1     1      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Servo_1_Write
     ___awdiv
   _Servo_Init

 _TMR0_ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      B      15       1       22.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      15      20        0.0%
DATA                 0      0      15       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Sep 30 16:44:46 2021

                     l35 01DA                       l38 01C0             ___awdiv@sign 0006  
                    l281 00D4                      l811 002C                      l821 0052  
                    l813 0030                      l805 0012                      l831 0088  
                    l823 0064                      l815 003E                      l807 0016  
                    l833 009E                      l825 006C                      l841 00B4  
                    l817 0046                      l809 0024                      l843 00C4  
                    l835 00A6                      l827 0074                      l819 004A  
                    l771 01D0                      l851 013C                      l845 00CC  
                    l837 00A8                      l829 0082                      l861 0166  
                    l853 0140                      l839 00AE                      l767 01C2  
                    l863 017C                      l855 0144                      l849 01A2  
                    l769 01CC                      l865 0182                      l857 014A  
                    l859 0160                      u100 0024                      u101 0020  
                    u110 003E                      u111 003A                      u120 0064  
                    u121 0060                      u130 0082                      u131 007E  
                    u140 009E                      u141 009A                      u150 00C4  
                    u151 00C0                      u167 0154                      u177 0170  
                    u187 018C                      wreg 000FE8                     i2l45 012C  
                   i2l47 0138                     _TMR0 000FD6                     _main 013C  
                   btemp 0016                     prodh 000FF4                     prodl 000FF3  
                   start 000E             ___param_bank 000000                    ?_main 0001  
        __end_of___awdiv 00D6                    _T0CON 000FD5          ___awdiv@divisor 0003  
                  i2l801 012E                    i2l803 0136                    i2l791 00D8  
                  i2l793 00E6                    i2l795 0108          ___awdiv@counter 0005  
                  i2l797 0110                    i2l799 0126         __end_of_TMR0_ISR 013C  
                  ttemp5 0017                    ttemp6 001A                    ttemp7 001E  
                  status 000FD8                    wtemp8 0017          __initialization 01DC  
           __end_of_main 01A0                   ??_main 000A            __activetblptr 000000  
       ___awdiv@dividend 0001                   i2u7_40 00E6                   i2u7_41 00E2  
                 i2u8_40 0108                   i2u8_41 0104                   i2u9_40 0126  
                 i2u9_41 0122    __end_of_Servo_1_Write 01C2                ??___awdiv 0005  
                 _data_s 000C               _Servo_Init 01C2                   clear_0 01E2  
       ___awdiv@quotient 0007                   isa$std 000001               __accesstop 0060  
__end_of__initialization 01E8            ___rparam_used 000001           __pcstackCOMRAM 0001  
              ?_TMR0_ISR 0001               ??_TMR0_ISR 0001              ?_Servo_Init 0001  
                __Hparam 0000                  __Lparam 0000                  ___awdiv 0012  
                __pcinit 01DC                  __ramtop 0800                  __ptext0 013C  
                __ptext1 01C2                  __ptext2 01A0                  __ptext3 0012  
              _T0CONbits 000FD5                  _cont_sr 0014           __pintcode_body 00D6  
   end_of_initialization 01E8      __size_of_Servo_Init 001A                  int_func 00D6  
                postinc0 000FEE                _TRISDbits 000F95        __size_of_TMR0_ISR 0134  
 __size_of_Servo_1_Write 0022      start_initialization 01DC             ??_Servo_Init 0001  
            __pbssCOMRAM 000C       __end_of_Servo_Init 01DC            _Servo_1_Write 01A0  
              __pintcode 0008                 ?___awdiv 0001         Servo_1_Write@ang 0009  
         ?_Servo_1_Write 0001                 _LATDbits 000F8C                 _TMR0_ISR 0008  
             _ADCON1bits 000FC1                 __Hrparam 0000                 __Lrparam 0000  
       __size_of___awdiv 00C4          ??_Servo_1_Write 0009            __size_of_main 0064  
               isa$xinst 000000                 int$flags 0016               _INTCONbits 000FF2  
               intlevel2 0000  
